# ============================================================================
# SharePoint 2019 Migration Inventory Script - FINAL ENHANCED VERSION
# ============================================================================
# Purpose: Comprehensive site collection and web inventory for migration planning
# Requires: SharePoint 2019 Management Shell (Run as Administrator)
# Outputs:
# - SP2019_MigrationInventory.csv         (main)
# - SP2019_LibraryStats.csv               (per library stats - user libraries only)
# - SP2019_UrlDepthIssues.csv             (per file/folder URL length and depth issues - user libraries only)
#
# EXCLUSIONS:
# - MySite Host site collections (SPSMSITEHOST template)
# - System SharePoint libraries (catalogs, Style Library, Site Assets, etc.)
# - Master Page Gallery files (*.master, system *.aspx)
# - Theme Gallery files
# - Style Library system files
# - Top10LargestFiles: only files >= 5MB included
# ============================================================================

Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue

# -------------------- Settings --------------------
$OutputFolder = "C:\Temp"
$CsvPath      = Join-Path $OutputFolder "SP2019_MigrationInventory.csv"
$ErrorLog     = Join-Path $OutputFolder "SP2019_MigrationInventory_Errors.log"
$LibStatsCsv  = Join-Path $OutputFolder "SP2019_LibraryStats.csv"
$UrlIssuesCsv = Join-Path $OutputFolder "SP2019_UrlDepthIssues.csv"

# Performance tuning: cap deep scans per list to avoid timeouts
$MaxFilesToScanPerList    = 1000  # For file name validation and size checks
$MaxItemsToScanPerList    = 5000  # For general item enumeration
$MaxUnghostedPagesToScan  = 500   # Cap unghosted pages scan to avoid timeout
$MinFileSizeMB            = 5     # Minimum file size for Top10LargestFiles tracking

# Library/URL analysis thresholds
$LargeLibraryThreshold     = 10000
$LargeViewFolderThreshold  = 5000
$DeepFolderDepthThreshold  = 10
$UrlWarnLength1            = 260
$UrlWarnLength2            = 400
# --------------------------------------------------

# Create output folder if needed
if (-not (Test-Path $OutputFolder)) {
    New-Item -ItemType Directory -Path $OutputFolder | Out-Null
}

# Initialize error log
"SharePoint 2019 Migration Inventory - Error Log" | Out-File $ErrorLog
"Started: $(Get-Date)" | Out-File $ErrorLog -Append
"=" * 80 | Out-File $ErrorLog -Append

$results       = New-Object System.Collections.Generic.List[object]
$libraryStats  = New-Object System.Collections.Generic.List[object]
$urlDepthIssues= New-Object System.Collections.Generic.List[object]

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

# Clean login name: remove claims prefix and DOMAIN\ from login names
function Get-CleanLoginName {
    param([string]$LoginName)
    if ([string]::IsNullOrEmpty($LoginName)) { return "" }
    if ($LoginName -match '\|') {
        $LoginName = $LoginName.Substring($LoginName.LastIndexOf('|') + 1)
    }
    if ($LoginName -match '\\') {
        $LoginName = $LoginName.Substring($LoginName.LastIndexOf('\') + 1)
    }
    return $LoginName
}

# Calculate path depth from server-relative URL
function Get-ServerRelativeDepth {
    param([string]$ServerRelativeUrl)
    if ([string]::IsNullOrWhiteSpace($ServerRelativeUrl)) { return 0 }
    $parts = $ServerRelativeUrl -split '/' | Where-Object { $_ }
    return ($parts | Measure-Object).Count
}

# Check if library is a system/SharePoint internal library
function Test-IsSystemLibrary {
    param(
        [Microsoft.SharePoint.SPList]$List
    )
    try {
        $url = $List.RootFolder.ServerRelativeUrl
        $title = $List.Title

        # Quick excludes by URL path
        if ($url -match '/_catalogs/' -or
            $url -match '/Style Library($|/)' -or
            $url -match '/Site Assets($|/)' -or
            $url -match '/Site Pages($|/)' -or
            $url -match '/Pages($|/)' -or
            $url -match '/Form Templates($|/)' -or
            $url -match '/Maintenance Logs($|/)' -or
            $url -match '/Converted Forms($|/)' -or
            $url -match '/Relationships List($|/)' -or
            $url -match '/MicroFeed($|/)' -or
            $url -match '/Composed Looks($|/)' -or
            $url -match '/Site Collection Documents($|/)' -or
            $url -match '/Site Collection Images($|/)' ) {
            return $true
        }

        # Known galleries and system lists by title
        $sysTitles = @(
            "Site Assets","Site Pages","Style Library","Form Templates","Pages",
            "Relationships List","Composed Looks","MicroFeed","Content and Structure Reports",
            "List Template Gallery","Web Part Gallery","Workflow History","Workflow Tasks",
            "User Information List","Workflow","Workflow Gallery","Maintenance Logs",
            "Converted Forms","Reusable Content","Site Collection Documents","Site Collection Images"
        )
        if ($sysTitles -contains $title) { return $true }

        # Avoid system list templates
        $sysTemplates = @(
            [Microsoft.SharePoint.SPListTemplateType]::WorkflowHistory,
            [Microsoft.SharePoint.SPListTemplateType]::WorkflowTask,
            [Microsoft.SharePoint.SPListTemplateType]::WebPartCatalog,
            [Microsoft.SharePoint.SPListTemplateType]::ListTemplateCatalog,
            [Microsoft.SharePoint.SPListTemplateType]::ThemeCatalog,
            [Microsoft.SharePoint.SPListTemplateType]::MasterPageCatalog,
            [Microsoft.SharePoint.SPListTemplateType]::ContentTypeCatalog,
            [Microsoft.SharePoint.SPListTemplateType]::DataSources,
            [Microsoft.SharePoint.SPListTemplateType]::AccessRequest
        )
        if ($sysTemplates -contains $List.BaseTemplate) { return $true }

        return $false
    } catch {
        return $false
    }
}

# Check for invalid file names and characters
function Test-InvalidFileName {
    param([string]$Name)
    if ([string]::IsNullOrEmpty($Name)) { return $false }
    $invalidChars = '[*:<>?"|]'
    $reservedNames = @('CON','PRN','AUX','NUL','COM1','COM2','COM3','COM4','COM5','COM6','COM7','COM8','COM9','LPT1','LPT2','LPT3','LPT4','LPT5','LPT6','LPT7','LPT8','LPT9')
    $nameOnly = [System.IO.Path]::GetFileNameWithoutExtension($Name)
    $hasInvalidChars = $Name -match $invalidChars
    $isReserved = $reservedNames -contains $nameOnly.ToUpper()
    $endsWithDotOrSpace = $Name -match '\.$|\ $'
    $hasLeadingTrailingSpace = $Name -match '^\ |\ $'
    return ($hasInvalidChars -or $isReserved -or $endsWithDotOrSpace -or $hasLeadingTrailingSpace)
}

# Count illegal characters
function Get-IllegalCharCount {
    param([string]$Name)
    if ([string]::IsNullOrEmpty($Name)) { return 0 }
    $illegalPattern = '[*:<>?"|]'
    $matches = [regex]::Matches($Name, $illegalPattern)
    return $matches.Count
}

# Log errors to file
function Write-ErrorLog {
    param([string]$Message,[string]$Location)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp | $Location | $Message" | Out-File $ErrorLog -Append
}

# ============================================================================
# MAIN SCRIPT
# ============================================================================

$assignment = Start-SPAssignment

try {
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "SharePoint 2019 Migration Inventory" -ForegroundColor Cyan
    Write-Host "========================================`n" -ForegroundColor Cyan

    Write-Host "Enumerating site collections..." -ForegroundColor Cyan
    $allSitesRaw = Get-SPSite -Limit All -ErrorAction Stop

    # FILTER: Exclude MySite Host site collections
    $allSites = $allSitesRaw | Where-Object { $_.RootWeb.WebTemplate -ne "SPSMSITEHOST" }

    $excludedCount = $allSitesRaw.Count - $allSites.Count
    $siteCount     = $allSites.Count
    $current       = 0

    Write-Host "Found $($allSitesRaw.Count) total site collection(s)" -ForegroundColor Yellow
    Write-Host "Excluded $excludedCount MySite Host site collection(s)" -ForegroundColor Yellow
    Write-Host "Processing $siteCount site collection(s)`n" -ForegroundColor Green

    foreach ($site in $allSites) {
        $current++
        $percentComplete = [Math]::Round(($current / $siteCount) * 100, 2)
        Write-Progress -Activity "Processing Site Collections" -Status "Site $current of $siteCount - $($site.Url)" -PercentComplete $percentComplete -Id 0

        try {
            # ========== SITE COLLECTION LEVEL DATA ==========
            $scUrl       = $site.Url
            $scSizeBytes = $site.Usage.Storage
            $scSizeMB    = [Math]::Round(($scSizeBytes / 1MB), 2)
            $scSizeGB    = [Math]::Round(($scSizeBytes / 1GB), 4)

            # Site collection owners (cleaned login names)
            $scOwners = @()
            if ($site.Owner)            { $scOwners += Get-CleanLoginName -LoginName $site.Owner.LoginName }
            if ($site.SecondaryContact) { $scOwners += Get-CleanLoginName -LoginName $site.SecondaryContact.LoginName }
            $scOwnersStr = ($scOwners | Where-Object { $_ } | Sort-Object -Unique) -join "; "

            # Site collection admins (cleaned login names)
            $scAdmins = @()
            try {
                $scAdmins = $site.RootWeb.SiteAdministrators | ForEach-Object { Get-CleanLoginName -LoginName $_.LoginName }
            } catch {
                Write-ErrorLog -Message $_.Exception.Message -Location "Site Collection Admins: $scUrl"
            }
            $scAdminsStr = ($scAdmins | Where-Object { $_ } | Sort-Object -Unique) -join "; "

            # Quota info
            $quotaTemplate    = ""
            $storageWarningMB = ""
            try {
                if ($site.Quota) {
                    $quotaTemplate = $site.Quota.QuotaID
                    if ($site.Quota.StorageWarningLevel -gt 0) {
                        $storageWarningMB = [Math]::Round(($site.Quota.StorageWarningLevel / 1MB), 2)
                    }
                }
            } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Quota Info: $scUrl" }

            # Recycle bin size
            $recycleBinSizeMB = 0
            try {
                $recycleBinSize = ($site.RecycleBin | Measure-Object -Property Size -Sum).Sum
                if ($recycleBinSize) { $recycleBinSizeMB = [Math]::Round(($recycleBinSize / 1MB), 2) }
            } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Recycle Bin: $scUrl" }

            # Audit enabled
            $auditEnabled = $false
            try { $auditEnabled = $site.Audit.AuditFlags -ne [Microsoft.SharePoint.SPAuditMaskType]::None } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Audit Settings: $scUrl" }

            # Nintex features at site collection level
            $nintexFeaturesSC = @()
            $HasNintexFeatureSC = $false
            try {
                $nintexFeaturesSC   = $site.Features | Where-Object { $_.Definition.DisplayName -like "*Nintex*" }
                $HasNintexFeatureSC = [bool]$nintexFeaturesSC
            } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Nintex Features SC: $scUrl" }

            # Custom features (non-OOTB)
            $customFeaturesSC = @()
            try {
                $customFeaturesSC = $site.Features | Where-Object { $_.Definition.Scope -eq "Site" -and -not ($_.DefinitionId -match '^00bfea71-') } | Select-Object -ExpandProperty DefinitionId -Unique
            } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Custom Features SC: $scUrl" }
            $customFeaturesSCStr = ($customFeaturesSC | ForEach-Object { $_.ToString() }) -join "; "

            # Sandbox solutions
            $sandboxSolutions = @()
            try { $sandboxSolutions = $site.Solutions | Select-Object -ExpandProperty Name } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Sandbox Solutions: $scUrl" }
            $sandboxSolutionsStr = ($sandboxSolutions) -join "; "

            # Total subsite count
            $subsiteCount = $site.AllWebs.Count - 1

            # ========== ITERATE ALL WEBS ==========
            $webIndex = 0
            $totalWebs = $site.AllWebs.Count

            foreach ($web in $site.AllWebs) {
                $webIndex++
                Write-Progress -Activity "Processing Webs in Site Collection" -Status "Web $webIndex of $totalWebs - $($web.Url)" -PercentComplete (($webIndex / $totalWebs) * 100) -ParentId 0 -Id 1

                try {
                    $webTitle   = $web.Title
                    $webUrl     = $web.Url
                    $webLastMod = $web.LastItemModifiedDate
                    $isRootWeb  = $web.IsRootWeb

                    # ========== OWNERSHIP & PERMISSIONS ==========
                    $ownersGroupCount    = 0
                    $orphanedUsersCount  = 0
                    $uniquePermObjects   = 0

                    try { if ($web.AssociatedOwnerGroup) { $ownersGroupCount = $web.AssociatedOwnerGroup.Users.Count } } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Owners Group: $webUrl" }
                    try {
                        $orphanedUsersCount = ($web.SiteUsers | Where-Object { $_.IsSiteAdmin -eq $false -and $_.LoginName -like "*\*" -and $_.UserToken -eq $null }).Count
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Orphaned Users: $webUrl" }
                    try { if ($web.HasUniqueRoleAssignments) { $uniquePermObjects++ } } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Unique Permissions Web: $webUrl" }

                    # ========== CUSTOMIZATIONS ==========
                    $customMasterPage  = $false
                    $alternateCss      = $false
                    $publishingEnabled = $false

                    try {
                        $defaultMasters = @("/_catalogs/masterpage/seattle.master", "/_catalogs/masterpage/oslo.master")
                        if ($web.CustomMasterUrl -and -not ($defaultMasters -contains $web.CustomMasterUrl)) { $customMasterPage = $true }
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Master Page: $webUrl" }
                    try { if ($web.AlternateCssUrl) { $alternateCss = $true } } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Alternate CSS: $webUrl" }
                    try { $pubFeature = $web.Features | Where-Object { $_.DefinitionId -eq "94c94ca6-b32f-4da9-a9e3-1f3d343d7ecb" }; if ($pubFeature) { $publishingEnabled = $true } } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Publishing Feature: $webUrl" }

                    # Custom features at web level
                    $customFeaturesWeb = @()
                    try {
                        $customFeaturesWeb = $web.Features | Where-Object { $_.Definition.Scope -eq "Web" -and -not ($_.DefinitionId -match '^00bfea71-') } | Select-Object -ExpandProperty DefinitionId -Unique
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Custom Features Web: $webUrl" }
                    $customFeaturesWebStr = ($customFeaturesWeb | ForEach-Object { $_.ToString() }) -join "; "

                    # Unghosted pages count (capped)
                    $unghostedPagesCount = 0
                    try {
                        $pageFiles = $web.Files | Select-Object -First $MaxUnghostedPagesToScan
                        $unghostedPagesCount = ($pageFiles | Where-Object { $_.CustomizedPageStatus -eq [Microsoft.SharePoint.SPCustomizedPageStatus]::Customized }).Count
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Unghosted Pages: $webUrl" }

                    # ========== CONTENT VOLUME ==========
                    $totalItemCount            = 0
                    $listsOver5k               = 0
                    $largestListItemCount      = 0
                    $brokenInheritanceLists    = 0
                    $infoPathLibrariesCount    = 0
                    $bcsExternalListsCount     = 0
                    $sp2010WorkflowsCount      = 0
                    $sp2013WorkflowsCount      = 0
                    $invalidFileNamesCount     = 0
                    $illegalCharsCount         = 0
                    $urlTooLongCount           = 0
                    $checkedOutFilesCount      = 0
                    $versioningInfo            = ""
                    $versionCountTotal         = 0
                    $topLargestFiles           = @()

                    # Per-web library stats and URL/depth issue tracking
                    $libStatsForWeb      = @()
                    $urlIssuesCountForWeb= 0

                    try {
                        $listIndex = 0
                        $totalLists = $web.Lists.Count

                        foreach ($list in $web.Lists) {
                            $listIndex++
                            Write-Progress -Activity "Processing Lists" -Status "List $listIndex of $totalLists - $($list.Title)" -PercentComplete (($listIndex / $totalLists) * 100) -ParentId 1 -Id 2

                            try {
                                $itemCount = $list.ItemCount
                                $totalItemCount += $itemCount

                                if ($itemCount -gt $largestListItemCount) { $largestListItemCount = $itemCount }
                                if ($itemCount -gt 5000) { $listsOver5k++ }
                                if ($list.HasUniqueRoleAssignments) { $brokenInheritanceLists++; $uniquePermObjects++ }

                                # InfoPath / BCS
                                if ($list.BaseTemplate -eq [Microsoft.SharePoint.SPListTemplateType]::XMLForm)       { $infoPathLibrariesCount++ }
                                if ($list.BaseTemplate -eq [Microsoft.SharePoint.SPListTemplateType]::ExternalList)   { $bcsExternalListsCount++ }

                                # Workflows
                                try {
                                    foreach ($wf in $list.WorkflowAssociations) {
                                        if ($wf.IsDeclarative) { $sp2013WorkflowsCount++ } else { $sp2010WorkflowsCount++ }
                                    }
                                } catch { Write-ErrorLog -Message $_.Exception.Message -Location "List Workflows: $webUrl - $($list.Title)" }

                                # Versioning info
                                if (-not $versioningInfo -and $list.EnableVersioning -and $list.BaseType -eq [Microsoft.SharePoint.SPBaseType]::DocumentLibrary) {
                                    $versioningInfo = "Enabled; Major=$($list.MajorVersionLimit)"
                                    if ($list.EnableMinorVersions) { $versioningInfo += "; Minor=$($list.MajorWithMinorVersionsLimit)" }
                                }

                                # Check if this is a system library
                                $libIsSystem = Test-IsSystemLibrary -List $list

                                # ========== LIBRARY STATS & FOLDER ANALYSIS (USER LIBRARIES ONLY) ==========
                                if (-not $libIsSystem) {
                                    $libIsDoc        = $list.BaseType -eq [Microsoft.SharePoint.SPBaseType]::DocumentLibrary
                                    $libServerRelUrl = $list.RootFolder.ServerRelativeUrl
                                    $libItemCount    = $itemCount
                                    $libFolderCount  = 0
                                    try { $libFolderCount = $list.Folders.Count } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Folder Count: $webUrl - $($list.Title)" }
                                    $libName         = $list.Title
                                    $libIsLarge      = ($libItemCount -ge $LargeLibraryThreshold)
                                    $libUrlLen       = $libServerRelUrl.Length
                                    $libDepth        = Get-ServerRelativeDepth -ServerRelativeUrl $libServerRelUrl
                                    $libDepthWarn    = ($libDepth -ge $DeepFolderDepthThreshold)

                                    $libStat = [PSCustomObject]@{
                                        SiteCollectionUrl          = $scUrl
                                        WebUrl                     = $webUrl
                                        ListTitle                  = $libName
                                        ListUrl                    = $libServerRelUrl
                                        BaseType                   = $list.BaseType.ToString()
                                        ItemCount                  = $libItemCount
                                        FolderCount                = $libFolderCount
                                        LargeLibrary               = $libIsLarge
                                        UrlLength                  = $libUrlLen
                                        UrlLenWarn260              = ($libUrlLen -ge $UrlWarnLength1)
                                        UrlLenWarn400              = ($libUrlLen -ge $UrlWarnLength2)
                                        PathDepth                  = $libDepth
                                        DepthWarn                  = $libDepthWarn
                                        LargestFolderName          = ""
                                        LargestFolderItemCount     = 0
                                        FoldersOverViewThreshold   = 0
                                    }
                                    $libStatsForWeb += $libStat

                                    # Enumerate folders
                                    try {
                                        $foldersToCheck = $list.Folders
                                        if ($foldersToCheck -and $foldersToCheck.Count -gt 0) {
                                            $largestFolderName   = ""
                                            $largestFolderItems  = 0
                                            $foldersOverThreshold= 0

                                            foreach ($folder in $foldersToCheck) {
                                                try {
                                                    $folderUrl       = $folder.ServerRelativeUrl
                                                    $folderItemCount = $folder.ItemCount
                                                    if ($folderItemCount -gt $largestFolderItems) { $largestFolderItems = $folderItemCount; $largestFolderName = $folder.Name }
                                                    if ($folderItemCount -ge $LargeViewFolderThreshold) { $foldersOverThreshold++ }

                                                    # Folder URL/Depth checks
                                                    $fUrlLen = $folderUrl.Length
                                                    $fDepth  = Get-ServerRelativeDepth -ServerRelativeUrl $folderUrl
                                                    if (($fUrlLen -ge $UrlWarnLength1) -or ($fUrlLen -ge $UrlWarnLength2) -or ($fDepth -ge $DeepFolderDepthThreshold)) {
                                                        $urlDepthIssues.Add([PSCustomObject]@{
                                                            SiteCollectionUrl = $scUrl
                                                            WebUrl            = $webUrl
                                                            ListTitle         = $libName
                                                            ObjectType        = "Folder"
                                                            Name              = $folder.Name
                                                            ServerRelativeUrl = $folderUrl
                                                            UrlLength         = $fUrlLen
                                                            UrlLenWarn260     = ($fUrlLen -ge $UrlWarnLength1)
                                                            UrlLenWarn400     = ($fUrlLen -ge $UrlWarnLength2)
                                                            PathDepth         = $fDepth
                                                            DepthWarn         = ($fDepth -ge $DeepFolderDepthThreshold)
                                                        }) | Out-Null
                                                        $urlIssuesCountForWeb++
                                                    }
                                                } catch {
                                                    Write-ErrorLog -Message $_.Exception.Message -Location "Folder Stats: $webUrl - $($list.Title) - $($folder.Name)"
                                                }
                                            }
                                            $libStat.LargestFolderName        = $largestFolderName
                                            $libStat.LargestFolderItemCount   = $largestFolderItems
                                            $libStat.FoldersOverViewThreshold = $foldersOverThreshold
                                        }
                                    } catch {
                                        Write-ErrorLog -Message $_.Exception.Message -Location "Folder Enumeration: $webUrl - $($list.Title)"
                                    }
                                }

                                # ========== DOCUMENT LIBRARY SPECIFIC CHECKS (USER LIBRARIES ONLY) ==========
                                if ($list.BaseType -eq [Microsoft.SharePoint.SPBaseType]::DocumentLibrary -and (-not $libIsSystem)) {

                                    $checkedOutFilesCount += $list.CheckedOutFiles.Count

                                    # Use SPQuery for large lists
                                    $filesToScan = $null
                                    if ($itemCount -le $MaxFilesToScanPerList) {
                                        $filesToScan = $list.Items
                                    } else {
                                        try {
                                            $query = New-Object Microsoft.SharePoint.SPQuery
                                            $query.RowLimit = $MaxFilesToScanPerList
                                            $query.ViewAttributes = "Scope='RecursiveAll'"
                                            $filesToScan = $list.GetItems($query)
                                        } catch {
                                            Write-ErrorLog -Message $_.Exception.Message -Location "SPQuery: $webUrl - $($list.Title)"
                                            $filesToScan = $list.Items | Select-Object -First $MaxFilesToScanPerList
                                        }
                                    }

                                    foreach ($item in $filesToScan) {
                                        try {
                                            if ($item.File -and $item.File.Exists) {
                                                $fileName  = $item.File.Name
                                                $fileUrl   = $item.File.ServerRelativeUrl
                                                $fileSize  = $item.File.Length
                                                $fileSizeMB= [Math]::Round(($fileSize / 1MB), 2)

                                                # Skip system file types
                                                if ($fileName -like "*.master" -or $fileName -like "*.webpart" -or $fileName -like "*.dwp" -or ($fileName -like "*.aspx" -and $fileUrl -like "*/_catalogs/*")) { continue }

                                                if (Test-InvalidFileName -Name $fileName) { $invalidFileNamesCount++ }
                                                $illegalCharsCount += Get-IllegalCharCount -Name $fileName

                                                if ($fileUrl.Length -gt 400) { $urlTooLongCount++ }

                                                # File URL/Depth checks
                                                $fUrlLen = $fileUrl.Length
                                                $fDepth  = Get-ServerRelativeDepth -ServerRelativeUrl $fileUrl
                                                if (($fUrlLen -ge $UrlWarnLength1) -or ($fUrlLen -ge $UrlWarnLength2) -or ($fDepth -ge $DeepFolderDepthThreshold)) {
                                                    $urlDepthIssues.Add([PSCustomObject]@{
                                                        SiteCollectionUrl = $scUrl
                                                        WebUrl            = $webUrl
                                                        ListTitle         = $list.Title
                                                        ObjectType        = "File"
                                                        Name              = $fileName
                                                        ServerRelativeUrl = $fileUrl
                                                        UrlLength         = $fUrlLen
                                                        UrlLenWarn260     = ($fUrlLen -ge $UrlWarnLength1)
                                                        UrlLenWarn400     = ($fUrlLen -ge $UrlWarnLength2)
                                                        PathDepth         = $fDepth
                                                        DepthWarn         = ($fDepth -ge $DeepFolderDepthThreshold)
                                                    }) | Out-Null
                                                    $urlIssuesCountForWeb++
                                                }

                                                # Top 10 Largest Files (>= 5MB only)
                                                if ($fileSizeMB -ge $MinFileSizeMB) {
                                                    if ($topLargestFiles.Count -lt 10) {
                                                        $topLargestFiles += [PSCustomObject]@{ Name = $fileName; SizeMB = $fileSizeMB }
                                                    } else {
                                                        $smallest = ($topLargestFiles | Sort-Object SizeMB | Select-Object -First 1)
                                                        if ($fileSizeMB -gt $smallest.SizeMB) {
                                                            $topLargestFiles = @($topLargestFiles | Where-Object { $_.Name -ne $smallest.Name })
                                                            $topLargestFiles += [PSCustomObject]@{ Name = $fileName; SizeMB = $fileSizeMB }
                                                        }
                                                    }
                                                }

                                                # Version count (sample)
                                                if ($item.File.Versions -and $item.File.Versions.Count -gt 0) {
                                                    $versionCountTotal += $item.File.Versions.Count
                                                }
                                            }
                                        } catch {
                                            # Skip inaccessible files
                                        }
                                    }
                                }
                            } catch {
                                Write-ErrorLog -Message $_.Exception.Message -Location "List Processing: $webUrl - $($list.Title)"
                            }
                        }

                        Write-Progress -Activity "Processing Lists" -Id 2 -Completed

                    } catch {
                        Write-ErrorLog -Message $_.Exception.Message -Location "Lists Enumeration: $webUrl"
                    }

                    # Web-level workflows
                    try {
                        foreach ($wf in $web.WorkflowAssociations) { if ($wf.IsDeclarative) { $sp2013WorkflowsCount++ } else { $sp2010WorkflowsCount++ } }
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Web Workflows: $webUrl" }

                    # Format top largest files
                    $topLargestFilesStr = ""
                    if ($topLargestFiles.Count -gt 0) {
                        $topLargestFilesStr = ($topLargestFiles | Sort-Object SizeMB -Descending | ForEach-Object { "$($_.Name) ($($_.SizeMB)MB)" }) -join "; "
                    }

                    # ========== NINTEX DETECTION ==========
                    $nintexFeaturesWeb   = @()
                    $HasNintexFeatureWeb = $false
                    try { $nintexFeaturesWeb = $web.Features | Where-Object { $_.Definition.DisplayName -like "*Nintex*" }; $HasNintexFeatureWeb = [bool]$nintexFeaturesWeb } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Nintex Features Web: $webUrl" }

                    $nintexFormsList = $null
                    $HasNintexForms  = $false
                    try {
                        $nintexFormsList = $web.Lists.TryGetList("NintexForms")
                        $HasNintexForms  = ($nintexFormsList -ne $null) -or ( ($nintexFeaturesSC + $nintexFeaturesWeb | Where-Object { $_.Definition.DisplayName -like "*Nintex*Form*" }).Count -gt 0 )
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Nintex Forms: $webUrl" }

                    $HasNintexWorkflow = $false
                    try {
                        $wfFeatureHit = ($nintexFeaturesSC + $nintexFeaturesWeb | Where-Object { $_.Definition.DisplayName -like "*Nintex*Workflow*" })
                        if ($wfFeatureHit -and $wfFeatureHit.Count -gt 0) {
                            $HasNintexWorkflow = $true
                        } else {
                            $wfGallery = $web.Lists | Where-Object { $_.BaseTemplate -eq [Microsoft.SharePoint.SPListTemplateType]::WorkflowCatalog }
                            if ($wfGallery) {
                                $nintexInWfItems = $wfGallery.Items | Where-Object { ($_.File -and $_.File.Name -like "*Nintex*") -or ($_.Title -like "*Nintex*") }
                                if ($nintexInWfItems -and $nintexInWfItems.Count -gt 0) { $HasNintexWorkflow = $true }
                            }
                        }
                    } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Nintex Workflow: $webUrl" }

                    # ========== ACTIVITY CHECK ==========
                    $last90DayActivity = $false
                    try { $cutoffDate = (Get-Date).AddDays(-90); if ($webLastMod -gt $cutoffDate) { $last90DayActivity = $true } } catch { Write-ErrorLog -Message $_.Exception.Message -Location "Activity Check: $webUrl" }

                    # ========== CONSOLIDATE PER-WEB LIBRARY STATS ==========
                    foreach ($s in $libStatsForWeb) { $libraryStats.Add($s) | Out-Null }

                    # Build human-readable summary for main CSV
                    $libSummary = ""
                    try {
                        $largeLibs   = ($libStatsForWeb | Where-Object { $_.LargeLibrary }).Count
                        $foldersOver = ($libStatsForWeb | Measure-Object -Property FoldersOverViewThreshold -Sum).Sum
                        $libSummary  = "Libraries: $($libStatsForWeb.Count); LargeLibs(>$LargeLibraryThreshold): $largeLibs; FoldersOverView(>$LargeViewFolderThreshold): $foldersOver"
                    } catch { $libSummary = "" }

                    # ========== BUILD RECORD ==========
                    $record = [PSCustomObject]@{
                        Type                        = if ($isRootWeb) { "Site Collection" } else { "Subsite" }
                        SiteName                    = $webTitle
                        SiteUrl                     = $webUrl
                        SiteCollectionUrl           = $scUrl
                        SubsiteCount                = if ($isRootWeb) { $subsiteCount } else { "" }
                        SiteCollectionSizeGB        = if ($isRootWeb) { $scSizeGB } else { "" }
                        SiteCollectionSizeMB        = if ($isRootWeb) { $scSizeMB } else { "" }
                        SiteOwners                  = if ($isRootWeb) { $scOwnersStr } else { "" }
                        SiteCollectionAdmins        = if ($isRootWeb) { $scAdminsStr } else { "" }
                        OwnersGroupCount            = $ownersGroupCount
                        OrphanedUsersCount          = $orphanedUsersCount
                        UniquePermissionObjects     = $uniquePermObjects
                        ListsWithBrokenInheritance  = $brokenInheritanceLists
                        LastModified                = $webLastMod
                        Last90DayActivity           = $last90DayActivity
                        TotalItemCount              = $totalItemCount
                        ListsOver5kCount            = $listsOver5k
                        LargestListItemCount        = $largestListItemCount
                        LibraryStatsSummary         = $libSummary
                        UrlDepthIssuesCount         = $urlIssuesCountForWeb
                        Top10LargestFiles           = $topLargestFilesStr
                        InvalidFileNamesCount       = $invalidFileNamesCount
                        IllegalCharsCount           = $illegalCharsCount
                        UrlTooLongCount             = $urlTooLongCount
                        CheckedOutFilesCount        = $checkedOutFilesCount
                        UnghostedPagesCount         = $unghostedPagesCount
                        VersioningInfo              = $versioningInfo
                        VersionCountTotal           = $versionCountTotal
                        CustomizedMasterPage        = $customMasterPage
                        AlternateCss                = $alternateCss
                        PublishingEnabled           = $publishingEnabled
                        SandboxSolutions            = if ($isRootWeb) { $sandboxSolutionsStr } else { "" }
                        CustomFeaturesSC            = if ($isRootWeb) { $customFeaturesSCStr } else { "" }
                        CustomFeaturesWeb           = $customFeaturesWebStr
                        InfoPathLibrariesCount      = $infoPathLibrariesCount
                        SP2010WorkflowsCount        = $sp2010WorkflowsCount
                        SP2013WorkflowsCount        = $sp2013WorkflowsCount
                        BcsExternalListsCount       = $bcsExternalListsCount
                        NintexFormsDetected         = $HasNintexForms
                        NintexWorkflowDetected      = $HasNintexWorkflow
                        AuditEnabled                = if ($isRootWeb) { $auditEnabled } else { "" }
                        QuotaTemplate               = if ($isRootWeb) { $quotaTemplate } else { "" }
                        StorageWarningLevelMB       = if ($isRootWeb) { $storageWarningMB } else { "" }
                        RecycleBinSizeMB            = if ($isRootWeb) { $recycleBinSizeMB } else { "" }
                    }
                    $results.Add($record) | Out-Null

                } catch {
                    Write-Warning "Error processing web $($web.Url): $($_.Exception.Message)"
                    Write-ErrorLog -Message $_.Exception.Message -Location "Web Processing: $($web.Url)"
                }
            }

            Write-Progress -Activity "Processing Webs in Site Collection" -Id 1 -Completed

        } catch {
            Write-Warning "Error processing site collection $($site.Url): $($_.Exception.Message)"
            Write-ErrorLog -Message $_.Exception.Message -Location "Site Collection Processing: $($site.Url)"
        }
    }

} catch {
    Write-Error "Fatal error during script execution: $($_.Exception.Message)"
    Write-ErrorLog -Message $_.Exception.Message -Location "Main Script Execution"
} finally {
    Stop-SPAssignment $assignment
    Write-Progress -Activity "Processing Site Collections" -Id 0 -Completed
}

# ============================================================================
# EXPORT RESULTS
# ============================================================================

if ($results.Count -gt 0) {
    $results | Sort-Object SiteCollectionUrl, @{Expression="Type"; Descending=$false} |
        Export-Csv -NoTypeInformation -Encoding UTF8 -Path $CsvPath

    Write-Host "`n========================================" -ForegroundColor Green
    Write-Host "INVENTORY COMPLETE" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Green
    Write-Host "CSV written: $CsvPath" -ForegroundColor Cyan
    Write-Host "Error log:   $ErrorLog" -ForegroundColor Cyan

    # Export additional reports
    if ($libraryStats.Count -gt 0) {
        $libraryStats | Sort-Object SiteCollectionUrl, WebUrl, ListTitle |
            Export-Csv -NoTypeInformation -Encoding UTF8 -Path $LibStatsCsv
        Write-Host "Library stats CSV: $LibStatsCsv" -ForegroundColor Cyan
        Write-Host "  Total user libraries analyzed: $($libraryStats.Count)" -ForegroundColor White
        
        $largeLibsTotal = ($libraryStats | Where-Object { $_.LargeLibrary }).Count
        $urlWarnings = ($libraryStats | Where-Object { $_.UrlLenWarn260 -or $_.UrlLenWarn400 }).Count
        $depthWarnings = ($libraryStats | Where-Object { $_.DepthWarn }).Count
        
        Write-Host "  Large libraries (>$LargeLibraryThreshold items): $largeLibsTotal" -ForegroundColor $(if ($largeLibsTotal -gt 0) { "Yellow" } else { "Green" })
        Write-Host "  Libraries with URL warnings: $urlWarnings" -ForegroundColor $(if ($urlWarnings -gt 0) { "Yellow" } else { "Green" })
        Write-Host "  Libraries with depth warnings: $depthWarnings" -ForegroundColor $(if ($depthWarnings -gt 0) { "Yellow" } else { "Green" })
    }

    if ($urlDepthIssues.Count -gt 0) {
        $urlDepthIssues | Sort-Object SiteCollectionUrl, WebUrl, ListTitle, ObjectType |
            Export-Csv -NoTypeInformation -Encoding UTF8 -Path $UrlIssuesCsv
        Write-Host "`nURL/Depth issues CSV: $UrlIssuesCsv" -ForegroundColor Cyan
        Write-Host "  Total items with issues: $($urlDepthIssues.Count)" -ForegroundColor White
        
        $filesWithIssues = ($urlDepthIssues | Where-Object { $_.ObjectType -eq "File" }).Count
        $foldersWithIssues = ($urlDepthIssues | Where-Object { $_.ObjectType -eq "Folder" }).Count
        $url260Issues = ($urlDepthIssues | Where-Object { $_.UrlLenWarn260 }).Count
        $url400Issues = ($urlDepthIssues | Where-Object { $_.UrlLenWarn400 }).Count
        $depthIssues = ($urlDepthIssues | Where-Object { $_.DepthWarn }).Count
        
        Write-Host "  Files with issues: $filesWithIssues" -ForegroundColor $(if ($filesWithIssues -gt 0) { "Red" } else { "Green" })
        Write-Host "  Folders with issues: $foldersWithIssues" -ForegroundColor $(if ($foldersWithIssues -gt 0) { "Red" } else { "Green" })
        Write-Host "  URL length >260 chars: $url260Issues" -ForegroundColor $(if ($url260Issues -gt 0) { "Red" } else { "Green" })
        Write-Host "  URL length >400 chars: $url400Issues" -ForegroundColor $(if ($url400Issues -gt 0) { "Red" } else { "Green" })
        Write-Host "  Path depth >$DeepFolderDepthThreshold levels: $depthIssues" -ForegroundColor $(if ($depthIssues -gt 0) { "Red" } else { "Green" })
    }

    Write-Host "`nStatistics:" -ForegroundColor Yellow
    Write-Host "  Total rows exported:    $($results.Count)" -ForegroundColor White
    Write-Host "  Site Collections:       $siteCount" -ForegroundColor White
    Write-Host "  Subsites:               $($results.Count - $siteCount)" -ForegroundColor White
    Write-Host "========================================`n" -ForegroundColor Green

    # Summary of migration blockers
    $totalInvalidFiles = ($results | Measure-Object -Property InvalidFileNamesCount -Sum).Sum
    $totalIllegalChars = ($results | Measure-Object -Property IllegalCharsCount -Sum).Sum
    $totalLongUrls     = ($results | Measure-Object -Property UrlTooLongCount -Sum).Sum
    $totalInfoPath     = ($results | Measure-Object -Property InfoPathLibrariesCount -Sum).Sum
    $totalSP2010WF     = ($results | Measure-Object -Property SP2010WorkflowsCount -Sum).Sum
    $totalNintexForms  = ($results | Where-Object { $_.NintexFormsDetected -eq $true }).Count
    $totalNintexWF     = ($results | Where-Object { $_.NintexWorkflowDetected -eq $true }).Count

    Write-Host "Migration Blockers Summary:" -ForegroundColor Yellow
    Write-Host "  Invalid file names:     $totalInvalidFiles" -ForegroundColor $(if ($totalInvalidFiles -gt 0) { "Red" } else { "Green" })
    Write-Host "  Illegal characters:     $totalIllegalChars" -ForegroundColor $(if ($totalIllegalChars -gt 0) { "Red" } else { "Green" })
    Write-Host "  URLs too long (>400):   $totalLongUrls" -ForegroundColor $(if ($totalLongUrls -gt 0) { "Red" } else { "Green" })
    Write-Host "  InfoPath libraries:     $totalInfoPath" -ForegroundColor $(if ($totalInfoPath -gt 0) { "Yellow" } else { "Green" })
    Write-Host "  SP2010 workflows:       $totalSP2010WF" -ForegroundColor $(if ($totalSP2010WF -gt 0) { "Yellow" } else { "Green" })
    Write-Host "  Nintex Forms sites:     $totalNintexForms" -ForegroundColor $(if ($totalNintexForms -gt 0) { "Yellow" } else { "Green" })
    Write-Host "  Nintex Workflow sites:  $totalNintexWF" -ForegroundColor $(if ($totalNintexWF -gt 0) { "Yellow" } else { "Green" })
    Write-Host "`n========================================" -ForegroundColor Green
    Write-Host "ALL REPORTS GENERATED SUCCESSFULLY" -ForegroundColor Green
    Write-Host "========================================`n" -ForegroundColor Green

} else {
    Write-Warning "No results to export. Check error log: $ErrorLog"
}

# ============================================================================
# END OF SCRIPT
# ============================================================================
